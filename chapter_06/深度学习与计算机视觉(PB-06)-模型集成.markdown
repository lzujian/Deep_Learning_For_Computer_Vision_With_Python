<div class="post-block"><link itemprop="mainEntityOfPage" href="http://lonepatient.top/2018/03/17/Deep_Learning_For_Computer_Vision_With_Python_PB_06.html"><span hidden="" itemprop="author" itemscope="" itemtype="http://schema.org/Person"><meta itemprop="name" content="eamlife"><meta itemprop="description" content=""><meta itemprop="image" content="/images/touxiang.jpeg"></span><span hidden="" itemprop="publisher" itemscope="" itemtype="http://schema.org/Organization"><meta itemprop="name" content="eamlife's blog"></span><header class="post-header"><h2 class="post-title" itemprop="name headline">深度学习与计算机视觉(PB-06)-模型集成</h2><div class="post-meta"><span class="post-time"><span class="post-meta-item-icon"><i class="fa fa-calendar-o"></i> </span><span class="post-meta-item-text">发表于</span> <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-03-17T07:27:08+08:00">2018-03-16 </time></span><span class="post-category"><span class="post-meta-divider">|</span> <span class="post-meta-item-icon"><i class="fa fa-folder-o"></i> </span><span class="post-meta-item-text">分类于</span> <span itemprop="about" itemscope="" itemtype="http://schema.org/Thing"><a href="/categories/深度学习/" itemprop="url" rel="index"><span itemprop="name">深度学习</span> </a></span>， <span itemprop="about" itemscope="" itemtype="http://schema.org/Thing"><a href="/categories/深度学习/计算机视觉/" itemprop="url" rel="index"><span itemprop="name">计算机视觉</span> </a></span></span><span class="post-comments-count"><span class="post-meta-divider">|</span> <span class="post-meta-item-icon"><i class="fa fa-comment-o"></i> </span><a href="/2018/03/17/Deep_Learning_For_Computer_Vision_With_Python_PB_06.html#comments" itemprop="discussionUrl"><span class="post-comments-count valine-comment-count" data-xid="/2018/03/17/Deep_Learning_For_Computer_Vision_With_Python_PB_06.html" itemprop="commentCount">0</span> </a></span><span id="/2018/03/17/Deep_Learning_For_Computer_Vision_With_Python_PB_06.html" class="leancloud_visitors" data-flag-title="深度学习与计算机视觉(PB-06)-模型集成"><span class="post-meta-divider">|</span> <span class="post-meta-item-icon"><i class="fa fa-eye"></i> </span><span class="post-meta-item-text">阅读次数:</span> <span class="leancloud-visitors-count">1</span></span><div class="post-wordcount"><span class="post-meta-divider">|</span> <span class="post-meta-item-icon"><i class="fa fa-file-word-o"></i> </span><span class="post-meta-item-text">字数统计:</span> <span title="字数统计">4k 字</span></div></div></header><div id="copyBtn" style="opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em"><span id="imgCopy"><i class="fa fa-paste fa-fw"></i></span><span id="imgSuccess" style="display: none;"><i class="fa fa-check-circle fa-fw" aria-hidden="true"></i></span></div><div class="post-body" itemprop="articleBody"><p>在本章中，我们将探讨集成方法的概念——多个分类器合并成一个大型元分类器的过程。将多个模型的平均结果最为最终结果，可以比随机的单一模型获得更高的性能（比如准确度）。事实上，几乎你所看到的在ImageNet数据挑战赛上获得最佳的结果都是通过集成多个卷积神经网络结果得到的。</p><a id="more"></a><p>首先，我们将讨论下Jensen不等式，这是集成方法的关键。然后，我们相互独立地训练多个CNN模型，并对每个CNN模型进行评估，最后，将多个训练好的cnn模型融合成一个元分类器，并评估元分类器的性能。</p><h2 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h2><p>集成方法通常指的是训练“大量”的模型(其中‘量’的确切值取决于分类任务)，然后通过投票或平均方法将多个模型的输出结果合并成一个结果，以提高分类的准确性。事实上，集成方法并不是专门针对深度学习和卷积神经网络的。一直以来我们使用了很多集成方法，比如AdaBoost[18]和Random forest[19]等技术都是集成方法的典型例子。</p><p>比如在随机森林中，我们独立地训练多棵决策树[20,21]，并由这些决策树组成一个大森林，最后利用组合得到的森林进行预测。如图6.1所示，随机森林由多棵决策树组成，每棵决策树都会返回一个自身的预测结果。这些结果将组成一个元分类器结果表，通过投票方法从结果表中返回出现最多的标签作为最后的预测结果。</p><p><a href="https://lonepatient-1257945978.cos.ap-chengdu.myqcloud.com/18-7-25/26271635.jpg" class="fancybox fancybox.image" rel="group"><img src="https://lonepatient-1257945978.cos.ap-chengdu.myqcloud.com/18-7-25/26271635.jpg" alt=""></a></p><center>图6.1 随机森林模型结构图</center><p>同样的概念也适用于深度学习和卷积神经网络。我们可以训练多个网络，且每个网络都会返回每一个标签的概率(如图6.2左)。然后，计算多个概率值的平均值，该平均值就是最后的预测结果。</p><p>为什么对多个模型进行平均预测是有效的？我们首先了解下Jensen不等式，然后通过实践表明集成方法的有效性。</p><p><a href="https://lonepatient-1257945978.cos.ap-chengdu.myqcloud.com/18-7-25/7806608.jpg" class="fancybox fancybox.image" rel="group"><img src="https://lonepatient-1257945978.cos.ap-chengdu.myqcloud.com/18-7-25/7806608.jpg" alt=""></a></p><center>图6.2 左：集成网络结构， 右：糖果罐</center><h3 id="Jensen-不等式"><a href="#Jensen-不等式" class="headerlink" title="Jensen 不等式"></a>Jensen 不等式</h3><p>一般来说，集成方法是通过融合一个有限的模型集合的结果获得比集合中单模型更好的准确度的过程。Dietterich[23]的开创性研究详细阐述了为什么集成方法通常比单个模型会获得更高的准确度。</p><p>Dietterich研究的成功主要取决于Jensen不等式，即机器学习文献中的“多样性”或“奇异值分解”。Jensen不等式的定义表明，凸函数(average)集成的误差小于或等于各模型的平均误差，当然这可能是由于其中一个单模型的误差低于所有模型的平均误差，但是，总的来说，可以确信的是平均所有模型的结果不比随机单模型差。</p><p>通过一个简单例子来解释Jensen不等式和模型平均的概念，比如图6.2右，让你猜猜罐子里面有多少糖果。</p><p>能猜出有多少糖果吗?100个?200个?500个？在没有参考的情况下，只能凭借自己的感觉。</p><p>但是，这个游戏有一个小技巧——基于Jensen不等式。如果你问我罐子里有多少糖果，我就会去问你和每个购买了书籍的人，问他们每个人认为糖果的数量是多少。然后我把所有的猜测都加起来，取平均值作为我的最终预测。</p><p>也许，其中有几个人的结果很接近真实的数量，也有几个人的结果偏离真实的数量，但是，在未知的情况下，我们无法根据任何的准则来评估哪个人的结果较接近真实的数量。所以我取每个人的结果平均值，至少平均而言，我的结果不比你随机选择一个结果差。本质上，这就是Jensen不等式。</p><p>随机猜测糖果数量游戏和深度学习模型的区别在于，假设CNNs训练很好[具有一定的准确度]，这时预测结果就有一定的可靠性，而不是随机猜测。因此，取多个cnn模型结果的平均值，往往分类准确度会得到一定的提高。所以在深度学习一些公开比赛中，排名靠前的结果基本都是训练了多种模型，然后对多个模型进行集成得到最后的结果，准确率往往会提高。</p><h2 id="CNN集成"><a href="#CNN集成" class="headerlink" title="CNN集成"></a>CNN集成</h2><p>在构建一个CNNs集成模型之前，我们需要独立训练多个CNN模型。在之前章节中，我们已经看到了许多训练单个CNN的例子——但是我们如何训练多个网络呢?总的来说，我们有两个选择:</p><ul><li><p>1.运行多次训练单个网络的脚本，将每次输出的模型权重进行保存。</p></li><li><p>2.创建一个单独的Python脚本，该脚本使用for循环来训练N个网络，并在每次迭代结束时输出序列化的模型。</p></li></ul><p>这两种方法都是完全可以接受的。第一种方法比较简单，多次运行命令就可以生成多个cnn模型。下面我们尝试第二个方法，新建一个文件，命名为train_models.py，写入以下代码:<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="comment">#设置图像的背景</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.use(<span class="string">'ggplot'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelBinarizer</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> pyimagesearch.nn.conv <span class="keyword">import</span> MiniVGGNet <span class="keyword">as</span> MVN</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> cifar10</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></tbody></table></figure></div><p></p><p><strong>说明</strong>：从加载的模块中可以看到</p><ul><li>1.主要训练多个MiniVGGNet模型进行融合</li><li>2.对CIFAR-10数据进行了数据增强处理</li><li>3.使用随机梯度下降法进行优化</li></ul><p>定义命令行参数:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># 解析命令行参数</span></span><br><span class="line">ap = argparse.ArgumentParser()</span><br><span class="line">ap.add_argument(<span class="string">'-o'</span>,<span class="string">'--output'</span>,required=<span class="keyword">True</span>,help=<span class="string">'path to output directory'</span>)</span><br><span class="line">ap.add_argument(<span class="string">'-m'</span>,<span class="string">'--models'</span>,required=<span class="keyword">True</span>,help=<span class="string">'path to output models directory'</span>)</span><br><span class="line">ap.add_argument(<span class="string">'-n'</span>,<span class="string">'--num_models'</span>,type = int,default=<span class="number">5</span>,help=<span class="string">'# of models to train'</span>)</span><br><span class="line">args = vars(ap.parse_args())</span><br></pre></td></tr></tbody></table></figure></div><p>其中:</p><ul><li>—output: 输出结果保存目录。</li><li>—models： 保存模型权重目录</li><li>—num_models: 训练模型个数，默认值为5</li></ul><p>一般传统的集成模型都是有多个[几十或者上百]个基础模型组成，比如随机森林由超过30棵决策树组成（大部分情况下都是超过100棵）。而CNNs集成主要由几个卷积神经网络[一般是5-10个]组成，因为训练CNN模型比较耗时且计算昂贵。</p><p>在这节实验中，我们主要使用的CIFAR-10数据集进行实验，首先，从磁盘中加载数据到内存中，并对内存中的数据进行预处理，如下代码：<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># 加载数据集，并划分为train和test数据</span></span><br><span class="line"><span class="comment"># 图像数据预处理：归一化</span></span><br><span class="line">((trainX,trainY),(testX,testY)) = cifar10.load_data()</span><br><span class="line">trainX  = trainX.astype(<span class="string">'float'</span>) / <span class="number">255.0</span></span><br><span class="line">testX = testX.astype(<span class="string">'float'</span>) / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签进行编码化处理</span></span><br><span class="line"></span><br><span class="line">lb = LabelBinarizer()</span><br><span class="line">trainY = lb.fit_transform(trainY)</span><br><span class="line">testY = lb.fit_transform(testY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化标签名陈</span></span><br><span class="line">labelNames = [<span class="string">"airplane"</span>, <span class="string">"automobile"</span>, <span class="string">"bird"</span>, <span class="string">"cat"</span>, <span class="string">"deer"</span>,</span><br><span class="line"><span class="string">"dog"</span>, <span class="string">"frog"</span>, <span class="string">"horse"</span>, <span class="string">"ship"</span>, <span class="string">"truck"</span>]</span><br></pre></td></tr></tbody></table></figure></div><p></p><p>进行数据增强处理：<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># 初始化数据增强模块</span></span><br><span class="line">aug = ImageDataGenerator(rotation_range=<span class="number">10</span>,width_shift_range=<span class="number">0.1</span>,</span><br><span class="line">                         height_shift_range=<span class="number">0.1</span>,horizontal_flip=<span class="keyword">True</span>,</span><br><span class="line">                         fill_mode=<span class="string">'nearest'</span>)</span><br></pre></td></tr></tbody></table></figure></div><p></p><p>主要对初始图像进行随机旋转，平移等变换操作，下面，针对数据集单独训练多个MiniVGGNet模型：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># 遍历模型训练个数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.arange(<span class="number">0</span>,args[<span class="string">'num_models'</span>]):</span><br><span class="line">    <span class="comment"># 初始化优化器和模型</span></span><br><span class="line">    print(<span class="string">"[INFO] training model {}/{}"</span>.format(i+<span class="number">1</span>,args[<span class="string">'num_models'</span>]))</span><br><span class="line">    opt = SGD(lr = <span class="number">0.01</span>,decay=<span class="number">0.01</span>/ <span class="number">40</span>,momentum=<span class="number">0.9</span>,</span><br><span class="line">              nesterov=<span class="keyword">True</span>)</span><br><span class="line">    model = MVN.MiniVGGNet.build(width=<span class="number">32</span>,height=<span class="number">32</span>,depth=<span class="number">3</span>,</span><br><span class="line">                                 classes = <span class="number">10</span>)</span><br><span class="line">    model.compile(loss = <span class="string">'categorical_crossentropy'</span>,optimizer=opt,metrics = [<span class="string">'accuracy'</span>])</span><br></pre></td></tr></tbody></table></figure></div><p>其中，在优化器SGD中，学习率lr= 0.01，动量g = 0.9，并使用Nesterov进行加速——Nesterov是Momentum的变种，与Momentum唯一区别就是，计算梯度的不同，Nesterov先用当前的速度v更新一遍参数，在用更新的临时参数计算梯度，具体的算法可以参考如下图所示：</p><p><a href="https://lonepatient-1257945978.cos.ap-chengdu.myqcloud.com/18-7-25/84738485.jpg" class="fancybox fancybox.image" rel="group"><img src="https://lonepatient-1257945978.cos.ap-chengdu.myqcloud.com/18-7-25/84738485.jpg" alt=""></a></p><center>Nesterov</center><p>下面，我们开始训练模型，并将模型权重保存到磁盘中。<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># 训练网络</span></span><br><span class="line">H = model.fit_generator(aug.flow(trainX,trainY,batch_size=<span class="number">64</span>),</span><br><span class="line">                        validation_data=(testX,testY),epochs=<span class="number">40</span>,</span><br><span class="line">                        steps_per_epoch=len(trainX) // <span class="number">64</span>,verbose = <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 将模型保存到磁盘中</span></span><br><span class="line">p = [args[<span class="string">'models'</span>],<span class="string">"model_{}.model"</span>.format(i)]</span><br><span class="line">model.save(os.path.sep.join(p))</span><br></pre></td></tr></tbody></table></figure></div><p></p><p>在网络完成训练之后，保存模型的评估结果:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># 评估模型</span></span><br><span class="line">predictions = model.predict(testX,batch_size=<span class="number">64</span>)</span><br><span class="line">report = classification_report(testY.argmax(axis =<span class="number">1</span>),</span><br><span class="line">                               predictions.argmax(axis =<span class="number">1</span>),target_names=labelNames)</span><br><span class="line"><span class="comment"># 将模型结果保存到文件中</span></span><br><span class="line">p = [args[<span class="string">'output'</span>],<span class="string">'model_{}.text'</span>.format(i)]</span><br><span class="line"><span class="keyword">with</span> open(os.path.sep.join(p),<span class="string">'w'</span>) <span class="keyword">as</span> fw:</span><br><span class="line">    fw.write(report)</span><br></pre></td></tr></tbody></table></figure></div><p>绘制模型的损失和精度，查看单个模型的性能：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># loss函数可视化</span></span><br><span class="line">p = [args[<span class="string">'output'</span>],<span class="string">'model_{}.png'</span>.format(i)]</span><br><span class="line">plt.style.use(<span class="string">'ggplot'</span>)</span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(np.arange(<span class="number">0</span>,<span class="number">40</span>),H.history[<span class="string">'loss'</span>],</span><br><span class="line">         label = <span class="string">'train_loss'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">0</span>,<span class="number">40</span>),H.history[<span class="string">'val_loss'</span>],</span><br><span class="line">         label = <span class="string">'val_loss'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">0</span>,<span class="number">40</span>),H.history[<span class="string">'acc'</span>],</span><br><span class="line">         label = <span class="string">'train-acc'</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">0</span>,<span class="number">40</span>),H.history[<span class="string">'val_acc'</span>],</span><br><span class="line">         label = <span class="string">'val-acc'</span>)</span><br><span class="line">plt.title(<span class="string">"Training Loss and Accuracy for model {}"</span>.format(i))</span><br><span class="line">plt.xlabel(<span class="string">"Epoch #"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Loss/Accuracy"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.savefig(os.path.sep.join(p))</span><br><span class="line">plt.close()</span><br></pre></td></tr></tbody></table></figure></div><p><strong>需要注意的是</strong>，我们永远不会直接进行集成训练——我们首先要进行一系列实验，以确定模型架构、优化器和超参数的具体信息，保证在给定的数据集中能够产生最高的精度。一旦确定了具体信息之后，我们就可以训练多个模型来形成一个模型集合。所以，直接训练集成方法是不合理的，因为我们还不知道什么样的体系结构、哪种优化器和具体的超参数对给定的数据集最有效。从之前的内容中，我们知道使用SGD训练的MiniVGGNet的准确度约为83%，下面通过应用集成方法，我们希望能够增加准确度。</p><p>只需执行以下命令，就可以开始训练模型:<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="meta">$</span><span class="bash"> python train_models.py --output output --models models</span></span><br></pre></td></tr></tbody></table></figure></div><p></p><p>训练了5个模型，查看输出路径，如:<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="meta">$</span><span class="bash"> ls output/</span></span><br><span class="line">model_0.png model_1.png model_2.png model_3.png model_4.png</span><br><span class="line">model_0.txt model_1.txt model_2.txt model_3.txt model_4.txt</span><br></pre></td></tr></tbody></table></figure></div><p></p><p>使用grep，我们可以轻松提取每个网络的分类结果:<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="meta">$</span><span class="bash"> grep ’avg / total’ output/*.txt</span></span><br><span class="line">output/model_0.txt:avg / total 0.83 0.83 0.82 10000</span><br><span class="line">output/model_1.txt:avg / total 0.83 0.83 0.82 10000</span><br><span class="line">output/model_2.txt:avg / total 0.83 0.83 0.82 10000</span><br><span class="line">output/model_3.txt:avg / total 0.82 0.82 0.81 10000</span><br><span class="line">output/model_4.txt:avg / total 0.83 0.83 0.82 10000</span><br></pre></td></tr></tbody></table></figure></div><p></p><p>从结果中可以看到，5个模型中有4个获得82%的分类准确率，而其余的模型只有81%的准确率。并从图6.3中可以看到每组学习曲线都有些相似，但是仔细看又有一些不同，这表明每个MiniVGGNet模型以不同的方式进行“学习”。</p><p><a href="https://lonepatient-1257945978.cos.ap-chengdu.myqcloud.com/18-7-25/44239955.jpg" class="fancybox fancybox.image" rel="group"><img src="https://lonepatient-1257945978.cos.ap-chengdu.myqcloud.com/18-7-25/44239955.jpg" alt=""></a></p><center>图6.3 训练结果</center><p>既然我们已经单独训练了5个模型，下面将它们进行结合进行预测结果，看看分类精度是否有提高。</p><h2 id="集成评估"><a href="#集成评估" class="headerlink" title="集成评估"></a>集成评估</h2><p>新一个名为test_ensemble.py文件，写入以下代码:<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="comment"># 加载所需模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelBinarizer</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> cifar10</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令行参数</span></span><br><span class="line">ap = argpase.ArgumentParser()</span><br><span class="line">ap.add_argument(<span class="string">'-m'</span>,<span class="string">'--models'</span>,required=<span class="keyword">True</span>,help=<span class="string">'path to models directory'</span>)</span><br><span class="line">args = vars(ap.parse_args())</span><br></pre></td></tr></tbody></table></figure></div><p></p><p>其中，命令行参数中:</p><ul><li>—models: 模型权重保存路径，这里加载权重时使用</li></ul><p>加载CIFAR-10数据集，这里只保留test数据集进行预测:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># 加载数据集，并进行预处理</span></span><br><span class="line">(testX,testY) = cifar10.load_data()[<span class="number">1</span>]</span><br><span class="line">testX = testX.astype(<span class="string">'float'</span>) / <span class="number">255.0</span></span><br><span class="line"><span class="comment"># 初始化标签名称</span></span><br><span class="line">labelNames = [<span class="string">"airplane"</span>, <span class="string">"automobile"</span>, <span class="string">"bird"</span>, <span class="string">"cat"</span>, <span class="string">"deer"</span>,</span><br><span class="line">              <span class="string">"dog"</span>, <span class="string">"frog"</span>, <span class="string">"horse"</span>, <span class="string">"ship"</span>, <span class="string">"truck"</span>]</span><br><span class="line"><span class="comment"># 类别one-hot编码</span></span><br><span class="line">lb = LabelBinarizer()</span><br><span class="line">testY = lb.fit_transform(testY)</span><br></pre></td></tr></tbody></table></figure></div><p>加载训练好的模型权重：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># 遍历模型</span></span><br><span class="line">modelPaths = os.path.sep.join([args[<span class="string">'models'</span>],<span class="string">"*.model"</span>])</span><br><span class="line">modelPaths = list(glob.glob(modelPaths))</span><br><span class="line">models = []</span><br></pre></td></tr></tbody></table></figure></div><p>保存的模型路径结构:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line">[’models/model_0.model’, ’models/model_1.model’, ’models/model_2.model’,</span><br><span class="line">’models/model_3.model’, ’models/model_4.model’]</span><br></pre></td></tr></tbody></table></figure></div><p>从磁盘中加载每一个模型:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="keyword">for</span> (i,modelPath) <span class="keyword">in</span> enumerate(modelPaths):</span><br><span class="line">    print(<span class="string">"[INFO] loading model {}/{}"</span>.format(i+<span class="number">1</span>,len(modelPaths)))</span><br><span class="line">    models.append(load_model(modelPath))</span><br></pre></td></tr></tbody></table></figure></div><p>构建一个集成模型结果，并进行评估：<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">print(<span class="string">"[INFO] evaluating ensemble..."</span>)</span><br><span class="line">predictions = []</span><br><span class="line"><span class="comment">#遍历模型</span></span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">    <span class="comment"># 模型预测</span></span><br><span class="line">    predictions.append(model.predict(testX,batch_size=<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平均所有模型结果</span></span><br><span class="line">predictions = np.average(predictions,axis = <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 模型结果</span></span><br><span class="line">print(classification_report(testY.argmax(axis =<span class="number">1</span>),</span><br><span class="line">                            predictions.argmax(axis=<span class="number">1</span>),target_names=labelNames))</span><br></pre></td></tr></tbody></table></figure></div><p></p><p>首先，我们会初始化一个预测列表，该列表主要保存每一个模型对test数据的预测结果。CIFAR-10数据集总共有10000张图像，10种类别，因此，每一个模型会产生一个(10000,10)的数组。遍历完5个模型预测之后，我们会得到一个shape为(5,10000,10)的predictions列表。而我们的真实数据shape为(10000,1),因此，我们需要对多个结果进行处理，常见的处理方法为取多个模型的平均值，如第6行代码所示，对得到的5个模型结果进行平均处理，将得到shape为(10000,10)的predictions列表，将predictions列表结果作为最后的输出。</p><p>为了确定我们的MiniVGGNet模型集合是否提高了分类精度，执行以下命令:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line"><span class="meta">$</span><span class="bash"> python test_ensemble.py --models models</span></span><br></pre></td></tr></tbody></table></figure></div><p>结果如下；<br></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true" data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><button class="btn-copy" data-clipboard-snippet="">  <i class="fa fa-clipboard"></i><span>copy</span></button><pre><span class="line">             precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">   airplane       0.87      0.85      0.86      1000</span><br><span class="line"> automobile       0.91      0.94      0.93      1000</span><br><span class="line">       bird       0.82      0.68      0.75      1000</span><br><span class="line">        cat       0.76      0.55      0.64      1000</span><br><span class="line">       deer       0.78      0.78      0.78      1000</span><br><span class="line">        dog       0.84      0.66      0.74      1000</span><br><span class="line">       frog       0.61      0.97      0.75      1000</span><br><span class="line">      horse       0.87      0.89      0.88      1000</span><br><span class="line">       ship       0.93      0.90      0.92      1000</span><br><span class="line">      truck       0.86      0.93      0.89      1000</span><br><span class="line"></span><br><span class="line">avg / total       0.83      0.81      0.81     10000</span><br></pre></td></tr></tbody></table></figure></div><p></p><p>从结果中可以看到准确度从82%提高到834%，而我们仅仅只是对多个模型的结果进行平均计算。通常，对卷积神经网路使用集成方法进行预测，准确率可以提高1-5%。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本章中，我们回顾了机器学习中的集合技术，以及如何训练多个独立的模型，然后取多个模型结果的平均值作为最后的结果，以提高分类的准确性。通过回顾Jensen不等式，我们可以找到集成方法的理论依据。Jensen不等式指出，总体而言，多个模型的融合结果不比随机单模型的结果差。</p><p>事实上，你在最新的论文(包括Inception[17]、ResNet[24]等)中看到的最好的结果都是多个模型进行集成得到的结果(通常是3-5个模型)。针对实际的数据集，合理进行使用集成方法。一般可以将准确度增加1-5%。</p><p>虽然，集成方法可以提高分类结果的准确度，但是，计算的代价也是很大的，因为本身训练一个卷积神经网路既耗时又计算昂贵，利用集成方法之后，我们不是只训练一个网络，而是训练多个CNN模型。所以一般使用差不多5-10个模型进行集成。</p><p>为了减轻训练多个模型的计算负担，Huang等人在2017年的一篇论文《Snapshot Ensembles:Train 1,get M for free》中提出了在单一训练过程中使用循环学习速率计划来训练多个模型的想法。</p><p>该方法的工作原理是:</p><ul><li>1.以较高的学习速率开始训练，然后快速降低学习速率，使得模型快速收敛到一个局部最小值，保存模型权重。</li><li>2.接着使用较大的学习率进行优化,使得模型能够跳出上一次的最小值</li><li>3.不断地重复M次</li></ul><p>关于该论文的具体内容以及实现代码可以看到<a href="https://lonepatient.top/2017/10/29/Snapshot%20Ensembles%20Train%201,%20Get%20M%20for%20Free.html">该篇文章</a></p><p>本文完整代码可在: <a href="https://github.com/lonePatient/Deep_Learning_For_Computer_Vision_With_Python" target="_blank" rel="noopener">github</a>上获取</p></div><div><div><div style="text-align:center;color:#ccc;font-size:14px">-------------本文结束<i class="fa fa-paw"></i>感谢您的阅读-------------</div></div></div><footer class="post-footer"><div class="post-tags"><a href="/tags/深度学习/" rel="tag"><i class="fa fa-envira"></i> 深度学习</a> <a href="/tags/计算机视觉/" rel="tag"><i class="fa fa-envira"></i> 计算机视觉</a></div><div class="post-widgets"><div id="needsharebutton-postbottom"><span class="btn"><i class="fa fa-share-alt" aria-hidden="true"></i></span></div></div><div class="post-nav"><div class="post-nav-next post-nav-item"><a href="/2018/03/17/knowledge_graph_data_construction.html" rel="prev" title="知识图谱数据构建的“硬骨头”"><i class="fa fa-chevron-left"></i> 知识图谱数据构建的“硬骨头”</a></div><span class="post-nav-divider"></span><div class="post-nav-prev post-nav-item"><a href="/2018/03/15/BLSTM_attention.html" rel="next" title="论文阅读-Attention-Based Bidirectional Long Short-Term Memory Networks for Relation Classification">论文阅读-Attention-Based Bidirectional Long Short-Term Memory Networks for Relation Classification <i class="fa fa-chevron-right"></i></a></div></div></footer></div>
https://lonepatient.top/2018/03/17/Deep_Learning_For_Computer_Vision_With_Python_PB_06.html
